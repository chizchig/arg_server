name: ArgoCD Deploy

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBE_CONFIG" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Verify Kubernetes Connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Get ArgoCD API Token
        run: |
          ARGOCD_TOKEN=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          if [ -z "$ARGOCD_TOKEN" ]; then
            echo "Failed to retrieve ArgoCD token"
            exit 1
          fi
          echo "ARGOCD_TOKEN is set and not empty"
          echo "ARGOCD_TOKEN=$ARGOCD_TOKEN" >> $GITHUB_ENV

      - name: Verify ArgoCD Server
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
        run: |
          if [[ "$ARGOCD_SERVER" == *"localhost"* ]] || [[ "$ARGOCD_SERVER" == *"127.0.0.1"* ]]; then
            echo "ARGOCD_SERVER is set to a localhost address. This will not work from GitHub Actions."
            echo "Please update the ARGOCD_SERVER secret to your ArgoCD's external URL."
            exit 1
          fi
          echo "ARGOCD_SERVER is set to: $ARGOCD_SERVER"

      - name: Sync ArgoCD Application
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
        run: |
          APP_NAME="trivial-app"  # Replace with your app name
          echo "Attempting to sync application: $APP_NAME"
          echo "Using ArgoCD server: $ARGOCD_SERVER"
          RESPONSE=$(curl -sSL -w "\n%{http_code}" \
            -H "Authorization: Bearer $ARGOCD_TOKEN" \
            -H "Content-Type: application/json" \
            -X POST \
            "$ARGOCD_SERVER/api/v1/applications/$APP_NAME/sync" \
            -d '{"prune": true, "strategy": {"hook": {"force": true}}}')
          
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          echo "HTTP Status: $HTTP_STATUS"
          echo "Response Body: $BODY"
          
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "Sync request failed"
            exit 1
          fi
          echo "Sync request successful"

      - name: Wait for Sync
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
        run: |
          APP_NAME="trivial-app"  # Replace with your app name
          for i in {1..30}; do
            RESPONSE=$(curl -sSL \
              -H "Authorization: Bearer $ARGOCD_TOKEN" \
              "$ARGOCD_SERVER/api/v1/applications/$APP_NAME")
            
            STATUS=$(echo "$RESPONSE" | jq -r '.status.sync.status')
            HEALTH=$(echo "$RESPONSE" | jq -r '.status.health.status')
            
            echo "Sync Status: $STATUS, Health: $HEALTH"
            
            if [ "$STATUS" = "Synced" ] && [ "$HEALTH" = "Healthy" ]; then
              echo "Application synced and healthy"
              exit 0
            fi
            echo "Waiting for sync and health check to complete..."
            sleep 10
          done
          echo "Sync or health check did not complete within the expected time"
          exit 1

      - name: Verify Deployment
        run: |
          kubectl get pods -n argocd
          echo "Deployment verification completed"