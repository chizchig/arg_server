name: ArgoCD Deploy

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBE_CONFIG" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd /usr/local/bin/argocd
          rm argocd
          argocd version --client

      - name: Set up port forwarding
        run: |
          # Start port forwarding in the background
          kubectl port-forward svc/argocd-server -n argocd 8080:443 &
          # Save the PID
          echo $! > port_forward_pid
          
          # Wait for the port to be available
          for i in {1..30}; do
            if nc -z localhost 8080; then
              echo "Port forwarding successful"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Port forwarding failed after 30 seconds"
              exit 1
            fi
            sleep 1
          done

      - name: Authenticate with ArgoCD
        env:
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
        run: |
          echo "Attempting to login to ArgoCD..."
          # Retry logic for ArgoCD login
          for i in {1..5}; do
            if argocd login localhost:8080 \
              --username "$ARGOCD_USERNAME" \
              --password "$ARGOCD_PASSWORD" \
              --insecure; then
              echo "Login successful"
              argocd version
              break
            fi
            if [ $i -eq 5 ]; then
              echo "ArgoCD login failed after 5 attempts"
              exit 1
            fi
            echo "Login attempt $i failed. Retrying in 5 seconds..."
            sleep 5
          done

      # ... rest of your workflow ...

      - name: Cleanup
        if: always()
        run: |
          if [ -f port_forward_pid ]; then
            kill $(cat port_forward_pid)
            rm port_forward_pid
          fi